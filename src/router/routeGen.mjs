import fs from "fs";
const apiPath = "./src/api";

// automatically create express routes based on the files in the api folder

const generateRoutesLikeNext = () => {
  let routeString = '', importStrings = ''
  // get all folders in src/api
  const folders = fs.readdirSync(apiPath);
  folders.forEach((folder) => {
    // get all files in each folder
    const routeFile = fs.readdirSync(`${apiPath}/${folder}`);
    routeFile.forEach((file) => {
      let userRoutes = {
        get: [],
        post: [],
        put: [],
        delete: [],
        patch: [],
        options: [],
      };

      // get file content
      const content = fs.readFileSync(
        `${apiPath}/${folder}/${file}`,
        "utf-8"
      );

      const functionRegex = /export async function (\w+)\(/g;
      let match;
      while ((match = functionRegex.exec(content))) {
        if (match[1].startsWith("get")) {
          userRoutes.get.push(match[1]);
        } else if (match[1].startsWith("post")) {
          userRoutes.post.push(match[1]);
        } else if (match[1].startsWith("put")) {
          userRoutes.put.push(match[1]);
        } else if (match[1].startsWith("delete")) {
          userRoutes.delete.push(match[1]);
        } else if (match[1].startsWith("patch")) {
          userRoutes.patch.push(match[1]);
        } else if (match[1].startsWith("options")) {
          userRoutes.options.push(match[1]);
        }
      }

      console.log(userRoutes);
      const fileNameWithoutTSExtension = file.split(".ts")[0];

      if (userRoutes.get.length > 0) {
        importStrings += `import { ${userRoutes.get.join(", ")} } from "../api/${folder}/${fileNameWithoutTSExtension}";\n`;
      }
      if (userRoutes.post.length > 0) {
        importStrings += `import { ${userRoutes.post.join(", ")} } from "../api/${folder}/${fileNameWithoutTSExtension}";\n`;
      }
      if (userRoutes.put.length > 0) {
        importStrings += `import { ${userRoutes.put.join(", ")} } from "../api/${folder}/${fileNameWithoutTSExtension}";\n`;
      }
      if (userRoutes.delete.length > 0) {
        importStrings += `import { ${userRoutes.delete.join(", ")} } from "../api/${folder}/${fileNameWithoutTSExtension}";\n`;
      }
      if (userRoutes.patch.length > 0) {
        importStrings += `import { ${userRoutes.patch.join(", ")} } from "../api/${folder}/${fileNameWithoutTSExtension}";\n`;
      }
      if (userRoutes.options.length > 0) {
        importStrings += `import { ${userRoutes.options.join(", ")} } from "../api/${folder}/${fileNameWithoutTSExtension}";\n`;
      }

      Object.keys(userRoutes).forEach((method) => {
        userRoutes[method].forEach((route) => {
          routeString += `router.${method}('/${folder}', ${route});\n`;
        });
      });

    });
  });
  return { routeString, importStrings };
};

const writeRoutes = (routeContent) => {
  // write to router.ts
  fs.writeFileSync("./src/router/router.ts", routeContent, (err) => {
    if (err) {
      console.log(err);
    }
  });
}

const routeGen = () => {
  let routeString = `
  // this file is automatically generated by routeGen.mjs
  // will automatically (in runtime) create express routes based on the files in the api folder


  import { Router } from "express";
  `;
  const routeContent = generateRoutesLikeNext();

  routeString += routeContent.importStrings;

  routeString += `
  export default function () {
    const router = Router();
  `;

  routeString += routeContent.routeString;

  routeString += `
    return router;
  }`

  // write to router.ts
  writeRoutes(routeString);
};

routeGen();
